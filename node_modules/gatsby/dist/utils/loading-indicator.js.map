{"version":3,"sources":["../../src/utils/loading-indicator.ts"],"names":["indicatorEnabled","undefined","writeVirtualLoadingIndicatorModule","process","env","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR","JSON","stringify","routeLoadingIndicatorRequests","app","get","req","res","params","method","send","status"],"mappings":";;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,gBAAsD,GAAGC,SAA7D;;AAEO,SAASC,kCAAT,GAAoD;AACzD,MAAIF,gBAAgB,KAAKC,SAAzB,EAAoC;AAClCD,IAAAA,gBAAgB,GACdG,OAAO,CAACC,GAAR,CAAYC,mCAAZ,IACAF,OAAO,CAACC,GAAR,CAAYE,wCAAZ,KAA0D,MAD1D,GAEK,SAFL,GAGI,KAJN;AAKD;;AAED,gDACG,+BADH,EAEG;AACL;AACA,aACMN,gBAAgB,KAAM,SAAtB,GACK;AACX;AACA,iBAHM,GAIIO,IAAI,CAACC,SAAL,CAAeR,gBAAf,CACL;AACL,IAXE;AAaD;;AAEM,SAASS,6BAAT,CAAuCC,GAAvC,EAA2D;AAChEA,EAAAA,GAAG,CAACC,GAAJ,CAAS,gCAAT,EAA0C,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtD,QAAID,GAAG,CAACE,MAAJ,CAAWC,MAAX,KAAuB,QAAvB,IAAkCf,gBAAgB,KAAK,IAA3D,EAAiE;AAC/DA,MAAAA,gBAAgB,GAAG,IAAnB;AACAE,MAAAA,kCAAkC;AACnC,KAHD,MAGO,IAAIU,GAAG,CAACE,MAAJ,CAAWC,MAAX,KAAuB,SAAvB,IAAmCf,gBAAgB,KAAK,KAA5D,EAAmE;AACxEA,MAAAA,gBAAgB,GAAG,KAAnB;AACAE,MAAAA,kCAAkC;AACnC;;AAEDW,IAAAA,GAAG,CAACG,IAAJ,CAAS;AACPC,MAAAA,MAAM,EAAEjB,gBAAgB,GAAI,SAAJ,GAAgB;AADjC,KAAT;AAGD,GAZD;AAaD","sourcesContent":["import { Express } from \"express\"\nimport { writeModule } from \"./gatsby-webpack-virtual-modules\"\n\n// set value to undefined first, because env vars needed to determine if indicator\n// should ever be enabled by default might not be set yet - we set it to \"initial\"\n// first time we write out module if loading indicator is allowed\n// \"initial\" means that browser will decide if it should show it\n// for now we do disable it by default when running in cypress\n// to not cause problems for users when they iterate on their E2E tests\n// this check could be expanded in the future to add support for more scenarios\n// like that.\nlet indicatorEnabled: \"initial\" | true | false | undefined = undefined\n\nexport function writeVirtualLoadingIndicatorModule(): void {\n  if (indicatorEnabled === undefined) {\n    indicatorEnabled =\n      process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND &&\n      process.env.GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR === `true`\n        ? `initial`\n        : false\n  }\n\n  writeModule(\n    `$virtual/loading-indicator.js`,\n    `\n    export function isLoadingIndicatorEnabled() {\n    return ${\n      indicatorEnabled === `initial`\n        ? `\\`Cypress\\` in window\n          ? false\n          : true`\n        : JSON.stringify(indicatorEnabled)\n    }\n  }`\n  )\n}\n\nexport function routeLoadingIndicatorRequests(app: Express): void {\n  app.get(`/___loading-indicator/:method?`, (req, res) => {\n    if (req.params.method === `enable` && indicatorEnabled !== true) {\n      indicatorEnabled = true\n      writeVirtualLoadingIndicatorModule()\n    } else if (req.params.method === `disable` && indicatorEnabled !== false) {\n      indicatorEnabled = false\n      writeVirtualLoadingIndicatorModule()\n    }\n\n    res.send({\n      status: indicatorEnabled ? `enabled` : `disabled`,\n    })\n  })\n}\n"],"file":"loading-indicator.js"}