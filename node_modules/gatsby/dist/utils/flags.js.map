{"version":3,"sources":["../../src/utils/flags.ts"],"names":["satisfiesSemvers","semverConstraints","result","_","toPairs","every","packageName","semverConstraint","packageVersion","require","version","e","semver","satisfies","includePrerelease","activeFlags","name","env","command","telemetryId","experimental","description","includedFlags","testFitness","umbrellaIssue","noCI","isPluginSharpNewEnoughOrNotInstalled","resolve","code"],"mappings":"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","sourcesContent":["import sampleSiteForExperiment from \"./sample-site-for-experiment\"\nimport _ from \"lodash\"\nimport semver from \"semver\"\n\n// Does this experiment run for only builds\ntype executingCommand = \"build\" | \"develop\" | \"all\"\n\nexport const satisfiesSemvers = (\n  semverConstraints: Record<string, string>\n): boolean => {\n  // Check each semver check for the flag.\n  // If any are false, then the flag doesn't pass\n  const result = _.toPairs(semverConstraints).every(\n    ([packageName, semverConstraint]) => {\n      let packageVersion: string\n      try {\n        packageVersion = require(`${packageName}/package.json`).version\n      } catch (e) {\n        return false\n      }\n\n      // We care if the semver check doesn't pass.\n      return semver.satisfies(packageVersion, semverConstraint, {\n        includePrerelease: true,\n      })\n    }\n  )\n\n  return result\n}\n\nexport type fitnessEnum = true | false | \"OPT_IN\"\n\nexport interface IFlag {\n  name: string\n  env: string\n  description: string\n  command: executingCommand\n  telemetryId: string\n  // Heuristics for deciding if a flag is experimental:\n  // - there are known bugs most people will encounter and that block being\n  // able to use Gatsby normally\n  // - very few people have tested the feature so we're not sure if we've\n  // uncovered even common problems.\n  //\n  // Flags should start as experimental but once all serious known bugs are\n  // resolved and ~50+ people have tested it, experimental should be set to\n  // false.\n  experimental: boolean\n  // Generally just return true.\n  //\n  // False means it'll be disabled despite the user setting it true e.g.\n  // it just won't work e.g. it doesn't have new enough version for something.\n  //\n  // OPT_IN means the gatsby will enable the flag (unless the user explicitly\n  // disablees it.\n  testFitness: (flag: IFlag) => fitnessEnum\n  includedFlags?: Array<string>\n  umbrellaIssue?: string\n  noCI?: boolean\n}\n\nconst activeFlags: Array<IFlag> = [\n  {\n    name: `FAST_DEV`,\n    env: `GATSBY_EXPERIMENTAL_FAST_DEV`,\n    command: `develop`,\n    telemetryId: `FastDev`,\n    experimental: false,\n    description: `Enable all experiments aimed at improving develop server start time`,\n    includedFlags: [\n      `DEV_SSR`,\n      `QUERY_ON_DEMAND`,\n      `LAZY_IMAGES`,\n      `PRESERVE_FILE_DOWNLOAD_CACHE`,\n      `PRESERVE_WEBPACK_CACHE`,\n    ],\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `DEV_SSR`,\n    env: `GATSBY_EXPERIMENTAL_DEV_SSR`,\n    command: `develop`,\n    telemetryId: `DevSsr`,\n    experimental: false,\n    description: `SSR pages on full reloads during develop. Helps you detect SSR bugs and fix them without needing to do full builds.`,\n    umbrellaIssue: `https://gatsby.dev/dev-ssr-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `QUERY_ON_DEMAND`,\n    env: `GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND`,\n    command: `develop`,\n    telemetryId: `QueryOnDemand`,\n    experimental: false,\n    description: `Only run queries when needed instead of running all queries upfront. Speeds starting the develop server.`,\n    umbrellaIssue: `https://gatsby.dev/query-on-demand-feedback`,\n    noCI: true,\n    testFitness: (): fitnessEnum => {\n      // Take a 10% of slice of users.\n      if (sampleSiteForExperiment(`QUERY_ON_DEMAND`, 10)) {\n        let isPluginSharpNewEnoughOrNotInstalled = false\n        try {\n          // Try requiring plugin-sharp so we know if it's installed or not.\n          // If it does, we also check if it's new enough.\n          // eslint-disable-next-line\n          require.resolve(`gatsby-plugin-sharp`)\n          const semverConstraints = {\n            // Because of this, this flag will never show up\n            \"gatsby-plugin-sharp\": `>=2.10.0`,\n          }\n          if (satisfiesSemvers(semverConstraints)) {\n            isPluginSharpNewEnoughOrNotInstalled = true\n          }\n        } catch (e) {\n          if (e.code === `MODULE_NOT_FOUND`) {\n            isPluginSharpNewEnoughOrNotInstalled = true\n          }\n        }\n\n        if (isPluginSharpNewEnoughOrNotInstalled) {\n          return `OPT_IN`\n        } else {\n          // Don't opt them in but they can still manually enable.\n          return true\n        }\n      } else {\n        // Don't opt them in but they can still manually enable.\n        return true\n      }\n    },\n  },\n  {\n    name: `LAZY_IMAGES`,\n    env: `GATSBY_EXPERIMENTAL_LAZY_IMAGES`,\n    command: `develop`,\n    telemetryId: `LazyImageProcessing`,\n    experimental: false,\n    description: `Don't process images during development until they're requested from the browser. Speeds starting the develop server. Requires gatsby-plugin-sharp@2.10.0 or above.`,\n    umbrellaIssue: `https://gatsby.dev/lazy-images-feedback`,\n    noCI: true,\n    testFitness: (): fitnessEnum => {\n      // Take a 10% of slice of users.\n      if (sampleSiteForExperiment(`QUERY_ON_DEMAND`, 10)) {\n        const semverConstraints = {\n          // Because of this, this flag will never show up\n          \"gatsby-plugin-sharp\": `>=2.10.0`,\n        }\n        if (satisfiesSemvers(semverConstraints)) {\n          return `OPT_IN`\n        } else {\n          // gatsby-plugi-sharp is either not installed or not new enough so\n          // just disable â€” it won't work anyways.\n          return false\n        }\n      } else {\n        return true\n      }\n    },\n  },\n  {\n    name: `PRESERVE_WEBPACK_CACHE`,\n    env: `GATSBY_EXPERIMENTAL_PRESERVE_WEBPACK_CACHE`,\n    command: `all`,\n    telemetryId: `PreserveWebpackCache`,\n    experimental: false,\n    description: `Don't delete webpack's cache when changing gatsby-node.js & gatsby-config.js files.`,\n    umbrellaIssue: `https://gatsby.dev/cache-clearing-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `PRESERVE_FILE_DOWNLOAD_CACHE`,\n    env: `GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE`,\n    command: `all`,\n    telemetryId: `PreserveFileDownloadCache`,\n    experimental: false,\n    description: `Don't delete the downloaded files cache when changing gatsby-node.js & gatsby-config.js files.`,\n    umbrellaIssue: `https://gatsby.dev/cache-clearing-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `FAST_REFRESH`,\n    env: `GATSBY_FAST_REFRESH`,\n    command: `develop`,\n    telemetryId: `FastRefresh`,\n    experimental: false,\n    description: `Use React Fast Refresh instead of the legacy react-hot-loader for instantaneous feedback in your development server. Recommended for versions of React >= 17.0.`,\n    umbrellaIssue: `https://gatsby.dev/fast-refresh-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n  {\n    name: `PARALLEL_SOURCING`,\n    env: `GATSBY_EXPERIMENTAL_PARALLEL_SOURCING`,\n    command: `all`,\n    telemetryId: `ParallelSourcing`,\n    experimental: true,\n    description: `Run all source plugins at the same time instead of serially. For sites with multiple source plugins, this can speedup sourcing and transforming considerably.`,\n    umbrellaIssue: `https://gatsby.dev/parallel-sourcing-feedback`,\n    testFitness: (): fitnessEnum => true,\n  },\n]\n\nexport default activeFlags\n"],"file":"flags.js"}