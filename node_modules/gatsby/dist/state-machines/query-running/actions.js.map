{"version":3,"sources":["../../../src/state-machines/query-running/actions.ts"],"names":["flushPageData","assignDirtyQueries","_context","data","queryIds","markSourceFilesDirty","filesDirty","markSourceFilesClean","trackRequestedQueryRun","pendingQueryRuns","context","payload","Set","pagePath","add","clearCurrentlyHandledPendingQueryRuns","currentlyHandledPendingQueryRuns","undefined","queryActions"],"mappings":";;;;;AACA;;AAMA;;AAEO,MAAMA,aAAa,GAAG,MAAY;AACvC;AACD,CAFM;;;AAIA,MAAMC,kBAAkB,GAAG,oBAGhC,CAACC,QAAD,EAAW;AAAEC,EAAAA;AAAF,CAAX,KAAwB;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,IAArB;AACA,SAAO;AACLC,IAAAA;AADK,GAAP;AAGD,CARiC,CAA3B;;AAUA,MAAMC,oBAAoB,GAAG,oBAA6B;AAC/DC,EAAAA,UAAU,EAAE;AADmD,CAA7B,CAA7B;;AAIA,MAAMC,oBAAoB,GAAG,oBAA6B;AAC/DD,EAAAA,UAAU,EAAE;AADmD,CAA7B,CAA7B;;AAIA,MAAME,sBAAsB,GAAG,oBAGpC;AACAC,EAAAA,gBAAgB,EAAE,CAACC,OAAD,EAAU;AAAEC,IAAAA;AAAF,GAAV,KAA0B;AAC1C,UAAMF,gBAAgB,GAAGC,OAAO,CAACD,gBAAR,IAA4B,IAAIG,GAAJ,EAArD;;AACA,QAAID,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEE,QAAb,EAAuB;AACrBJ,MAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,OAAO,CAACE,QAA7B;AACD;;AACD,WAAOJ,gBAAP;AACD;AAPD,CAHoC,CAA/B;;AAaA,MAAMM,qCAAqC,GAAG,oBAEnD;AACAC,EAAAA,gCAAgC,EAAEC;AADlC,CAFmD,CAA9C;;AAMA,MAAMC,YAA0D,GAAG;AACxEjB,EAAAA,kBADwE;AAExED,EAAAA,aAFwE;AAGxEK,EAAAA,oBAHwE;AAIxEE,EAAAA,oBAJwE;AAKxEC,EAAAA,sBALwE;AAMxEO,EAAAA;AANwE,CAAnE","sourcesContent":["import { IQueryRunningContext } from \"./types\"\nimport {\n  DoneInvokeEvent,\n  assign,\n  ActionFunctionMap,\n  AnyEventObject,\n} from \"xstate\"\nimport { enqueueFlush } from \"../../utils/page-data\"\n\nexport const flushPageData = (): void => {\n  enqueueFlush()\n}\n\nexport const assignDirtyQueries = assign<\n  IQueryRunningContext,\n  DoneInvokeEvent<any>\n>((_context, { data }) => {\n  const { queryIds } = data\n  return {\n    queryIds,\n  }\n})\n\nexport const markSourceFilesDirty = assign<IQueryRunningContext>({\n  filesDirty: true,\n})\n\nexport const markSourceFilesClean = assign<IQueryRunningContext>({\n  filesDirty: false,\n})\n\nexport const trackRequestedQueryRun = assign<\n  IQueryRunningContext,\n  AnyEventObject\n>({\n  pendingQueryRuns: (context, { payload }) => {\n    const pendingQueryRuns = context.pendingQueryRuns || new Set<string>()\n    if (payload?.pagePath) {\n      pendingQueryRuns.add(payload.pagePath)\n    }\n    return pendingQueryRuns\n  },\n})\n\nexport const clearCurrentlyHandledPendingQueryRuns = assign<\n  IQueryRunningContext\n>({\n  currentlyHandledPendingQueryRuns: undefined,\n})\n\nexport const queryActions: ActionFunctionMap<IQueryRunningContext, any> = {\n  assignDirtyQueries,\n  flushPageData,\n  markSourceFilesDirty,\n  markSourceFilesClean,\n  trackRequestedQueryRun,\n  clearCurrentlyHandledPendingQueryRuns,\n}\n"],"file":"actions.js"}