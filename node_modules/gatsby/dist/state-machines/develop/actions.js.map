{"version":3,"sources":["../../../src/state-machines/develop/actions.ts"],"names":["callApi","store","event","payload","addNodeMutation","nodeMutationBatch","push","assignStoreAndWorkerPool","_context","workerPool","data","setQueryRunningFinished","boundActionCreators","setProgramStatus","ProgramStatus","BOOTSTRAP_QUERY_RUNNING_FINISHED","markQueryFilesDirty","queryFilesDirty","markSourceFilesDirty","sourceFilesDirty","markSourceFilesClean","markNodesDirty","nodesMutatedDuringQueryRun","markNodesClean","incrementRecompileCount","nodesMutatedDuringQueryRunRecompileCount","count","reporter","verbose","resetRecompileCount","assignServiceResult","spawnMutationListener","mutationListener","listenForMutations","assignServers","spawnWebpackListener","webpackListener","compiler","undefined","assignWebhookBody","webhookBody","webhookSourcePluginName","pluginName","clearWebhookBody","finishParentSpan","parentSpan","finish","saveDbState","logError","error","panic","panicBecauseOfInfiniteLoop","stripIndent","trackRequestedQueryRun","pendingQueryRuns","context","Set","pagePath","add","clearPendingQueryRuns","buildActions"],"mappings":";;;;;;;AAAA;;AASA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACO,MAAMA,OAAsD,GAAG,CACpE;AAAEC,EAAAA;AAAF,CADoE,EAEpEC,KAFoE,KAGjE,kCAAYA,KAAK,CAACC,OAAlB,EAA2BF,KAA3B,CAHE;AAKP;AACA;AACA;AACA;;;;AACO,MAAMG,eAAe,GAAG,oBAAsC;AACnEC,EAAAA,iBAAiB,EAAE,CAAC;AAAEA,IAAAA,iBAAiB,GAAG;AAAtB,GAAD,EAA6B;AAAEF,IAAAA;AAAF,GAA7B,KAA6C;AAC9D;AACAE,IAAAA,iBAAiB,CAACC,IAAlB,CAAuBH,OAAvB;AACA,WAAOE,iBAAP;AACD;AALkE,CAAtC,CAAxB;;AAQA,MAAME,wBAAwB,GAAG,oBACtC,CAACC,QAAD,EAAWN,KAAX,KAAqB;AACnB,QAAM;AAAED,IAAAA,KAAF;AAASQ,IAAAA;AAAT,MAAwBP,KAAK,CAACQ,IAApC;AACA,SAAO;AACLT,IAAAA,KADK;AAELQ,IAAAA;AAFK,GAAP;AAID,CAPqC,CAAjC;;;AAUP,MAAME,uBAAuB,GAAG,YAA2B;AACzDC,+BAAoBC,gBAApB,CACEC,qBAAcC,gCADhB;AAGD,CAJD;;AAMO,MAAMC,mBAAmB,GAAG,oBAAsB;AACvDC,EAAAA,eAAe,EAAE;AADsC,CAAtB,CAA5B;;AAIA,MAAMC,oBAAoB,GAAG,oBAAsB;AACxDC,EAAAA,gBAAgB,EAAE;AADsC,CAAtB,CAA7B;;AAIA,MAAMC,oBAAoB,GAAG,oBAAsB;AACxDD,EAAAA,gBAAgB,EAAE;AADsC,CAAtB,CAA7B;;AAIA,MAAME,cAAc,GAAG,oBAAsB;AAClDC,EAAAA,0BAA0B,EAAE;AADsB,CAAtB,CAAvB;;AAIA,MAAMC,cAAc,GAAG,oBAAsB;AAClDD,EAAAA,0BAA0B,EAAE;AADsB,CAAtB,CAAvB;;AAIA,MAAME,uBAAuB,GAAG,oBAAsB;AAC3DC,EAAAA,wCAAwC,EAAE,CAAC;AACzCA,IAAAA,wCAAwC,EAAEC,KAAK,GAAG;AADT,GAAD,KAEpC;AACJC,sBAASC,OAAT,CACG,qEACCF,KAAK,GAAG,CACT,EAHH;;AAKA,WAAOA,KAAK,GAAG,CAAf;AACD;AAV0D,CAAtB,CAAhC;;AAaA,MAAMG,mBAAmB,GAAG,oBAAsB;AACvDJ,EAAAA,wCAAwC,EAAE,CADa;AAEvDH,EAAAA,0BAA0B,EAAE;AAF2B,CAAtB,CAA5B;;AAKA,MAAMQ,mBAAmB,GAAG,oBACjC,CAACtB,QAAD,EAAW;AAAEE,EAAAA;AAAF,CAAX,KAAyCA,IADR,CAA5B;AAIP;AACA;AACA;;;AACO,MAAMqB,qBAAqB,GAAG,oBAAsB;AACzDC,EAAAA,gBAAgB,EAAE,MAAM,mBAAMC,sCAAN,EAA2B,sBAA3B;AADiC,CAAtB,CAA9B;;AAIA,MAAMC,aAAa,GAAG,oBAC3B,CAAC1B,QAAD,EAAW;AAAEE,EAAAA;AAAF,CAAX,KAAwB;AACtB,SAAO,EACL,GAAGA;AADE,GAAP;AAGD,CAL0B,CAAtB;;AAQA,MAAMyB,oBAAoB,GAAG,oBAAsC;AACxEC,EAAAA,eAAe,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkB;AACjC,QAAI,CAACA,QAAL,EAAe;AACb,aAAOC,SAAP;AACD;;AACD,WAAO,mBAAM,2CAAqBD,QAArB,CAAN,CAAP;AACD;AANuE,CAAtC,CAA7B;;AASA,MAAME,iBAAiB,GAAG,oBAAsC;AACrEC,EAAAA,WAAW,EAAE,CAAChC,QAAD,EAAW;AAAEL,IAAAA;AAAF,GAAX,KAA2BA,OAA3B,aAA2BA,OAA3B,uBAA2BA,OAAO,CAAEqC,WADoB;AAErEC,EAAAA,uBAAuB,EAAE,CAACjC,QAAD,EAAW;AAAEL,IAAAA;AAAF,GAAX,KAA2BA,OAA3B,aAA2BA,OAA3B,uBAA2BA,OAAO,CAAEuC;AAFQ,CAAtC,CAA1B;;AAKA,MAAMC,gBAAgB,GAAG,oBAAsC;AACpEH,EAAAA,WAAW,EAAEF,SADuD;AAEpEG,EAAAA,uBAAuB,EAAEH;AAF2C,CAAtC,CAAzB;;;AAKA,MAAMM,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAC9BA,UAD8B,aAC9BA,UAD8B,uBAC9BA,UAAU,CAAEC,MAAZ,EADK;;;;AAGA,MAAMC,WAAW,GAAG,MAAqB,oBAAzC;;;;AAEA,MAAMC,QAAuD,GAAG,CACrExC,QADqE,EAErEN,KAFqE,KAGlE;AACHyB,oBAASsB,KAAT,CAAe/C,KAAK,CAACQ,IAArB;AACD,CALM;;;;AAOA,MAAMwC,KAAoD,GAAG,CAClE1C,QADkE,EAElEN,KAFkE,KAG/D;AACHyB,oBAASuB,KAAT,CAAehD,KAAK,CAACQ,IAArB;AACD,CALM;;;;AAOA,MAAMyC,0BAGZ,GAAG,MAAM;AACRxB,oBAASuB,KAAT,CACEvB,kBAASyB,WAAT,CAAsB;AAC1B;AACA;AACA,oHAHI,CADF;AAMD,CAVM;;;AAYA,MAAMC,sBAAsB,GAAG,oBAAsC;AAC1EC,EAAAA,gBAAgB,EAAE,CAACC,OAAD,EAAU;AAAEpD,IAAAA;AAAF,GAAV,KAA0B;AAC1C,UAAMmD,gBAAgB,GAAGC,OAAO,CAACD,gBAAR,IAA4B,IAAIE,GAAJ,EAArD;;AACA,QAAIrD,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEsD,QAAb,EAAuB;AACrBH,MAAAA,gBAAgB,CAACI,GAAjB,CAAqBvD,OAAO,CAACsD,QAA7B;AACD;;AACD,WAAOH,gBAAP;AACD;AAPyE,CAAtC,CAA/B;;AAUA,MAAMK,qBAAqB,GAAG,oBAAsB,MAAM;AAC/D,SAAO;AACLL,IAAAA,gBAAgB,EAAE,IAAIE,GAAJ;AADb,GAAP;AAGD,CAJoC,CAA9B;;AAMA,MAAMI,YAA8D,GAAG;AAC5E5D,EAAAA,OAD4E;AAE5EqB,EAAAA,cAF4E;AAG5EjB,EAAAA,eAH4E;AAI5E2B,EAAAA,qBAJ4E;AAK5ExB,EAAAA,wBAL4E;AAM5EuB,EAAAA,mBAN4E;AAO5EI,EAAAA,aAP4E;AAQ5ElB,EAAAA,mBAR4E;AAS5EuB,EAAAA,iBAT4E;AAU5EI,EAAAA,gBAV4E;AAW5EC,EAAAA,gBAX4E;AAY5ET,EAAAA,oBAZ4E;AAa5EjB,EAAAA,oBAb4E;AAc5EE,EAAAA,oBAd4E;AAe5EG,EAAAA,cAf4E;AAgB5EC,EAAAA,uBAhB4E;AAiB5EK,EAAAA,mBAjB4E;AAkB5EsB,EAAAA,0BAlB4E;AAmB5EJ,EAAAA,WAnB4E;AAoB5EpC,EAAAA,uBApB4E;AAqB5EuC,EAAAA,KArB4E;AAsB5EF,EAAAA,QAtB4E;AAuB5EK,EAAAA,sBAvB4E;AAwB5EM,EAAAA;AAxB4E,CAAvE","sourcesContent":["import {\n  assign,\n  AnyEventObject,\n  ActionFunction,\n  spawn,\n  ActionFunctionMap,\n  DoneEventObject,\n} from \"xstate\"\nimport { IBuildContext } from \"../../services\"\nimport { boundActionCreators } from \"../../redux/actions\"\nimport { listenForMutations } from \"../../services/listen-for-mutations\"\nimport { DataLayerResult } from \"../data-layer\"\nimport { saveState } from \"../../db\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { ProgramStatus } from \"../../redux/types\"\nimport { createWebpackWatcher } from \"../../services/listen-to-webpack\"\nimport { callRealApi } from \"../../utils/call-deferred-api\"\n/**\n * Handler for when we're inside handlers that should be able to mutate nodes\n * Instead of queueing, we call it right away\n */\nexport const callApi: ActionFunction<IBuildContext, AnyEventObject> = (\n  { store },\n  event\n) => callRealApi(event.payload, store)\n\n/**\n * Event handler used in all states where we're not ready to process node\n * mutations. Instead we add it to a batch to process when we're next idle\n */\nexport const addNodeMutation = assign<IBuildContext, AnyEventObject>({\n  nodeMutationBatch: ({ nodeMutationBatch = [] }, { payload }) => {\n    // It's not pretty, but it's much quicker than concat\n    nodeMutationBatch.push(payload)\n    return nodeMutationBatch\n  },\n})\n\nexport const assignStoreAndWorkerPool = assign<IBuildContext, DoneEventObject>(\n  (_context, event) => {\n    const { store, workerPool } = event.data\n    return {\n      store,\n      workerPool,\n    }\n  }\n)\n\nconst setQueryRunningFinished = async (): Promise<void> => {\n  boundActionCreators.setProgramStatus(\n    ProgramStatus.BOOTSTRAP_QUERY_RUNNING_FINISHED\n  )\n}\n\nexport const markQueryFilesDirty = assign<IBuildContext>({\n  queryFilesDirty: true,\n})\n\nexport const markSourceFilesDirty = assign<IBuildContext>({\n  sourceFilesDirty: true,\n})\n\nexport const markSourceFilesClean = assign<IBuildContext>({\n  sourceFilesDirty: false,\n})\n\nexport const markNodesDirty = assign<IBuildContext>({\n  nodesMutatedDuringQueryRun: true,\n})\n\nexport const markNodesClean = assign<IBuildContext>({\n  nodesMutatedDuringQueryRun: false,\n})\n\nexport const incrementRecompileCount = assign<IBuildContext>({\n  nodesMutatedDuringQueryRunRecompileCount: ({\n    nodesMutatedDuringQueryRunRecompileCount: count = 0,\n  }) => {\n    reporter.verbose(\n      `Re-running queries because nodes mutated during query run. Count: ${\n        count + 1\n      }`\n    )\n    return count + 1\n  },\n})\n\nexport const resetRecompileCount = assign<IBuildContext>({\n  nodesMutatedDuringQueryRunRecompileCount: 0,\n  nodesMutatedDuringQueryRun: false,\n})\n\nexport const assignServiceResult = assign<IBuildContext, DoneEventObject>(\n  (_context, { data }): DataLayerResult => data\n)\n\n/**\n * This spawns the service that listens to the `emitter` for various mutation events\n */\nexport const spawnMutationListener = assign<IBuildContext>({\n  mutationListener: () => spawn(listenForMutations, `listen-for-mutations`),\n})\n\nexport const assignServers = assign<IBuildContext, AnyEventObject>(\n  (_context, { data }) => {\n    return {\n      ...data,\n    }\n  }\n)\n\nexport const spawnWebpackListener = assign<IBuildContext, AnyEventObject>({\n  webpackListener: ({ compiler }) => {\n    if (!compiler) {\n      return undefined\n    }\n    return spawn(createWebpackWatcher(compiler))\n  },\n})\n\nexport const assignWebhookBody = assign<IBuildContext, AnyEventObject>({\n  webhookBody: (_context, { payload }) => payload?.webhookBody,\n  webhookSourcePluginName: (_context, { payload }) => payload?.pluginName,\n})\n\nexport const clearWebhookBody = assign<IBuildContext, AnyEventObject>({\n  webhookBody: undefined,\n  webhookSourcePluginName: undefined,\n})\n\nexport const finishParentSpan = ({ parentSpan }: IBuildContext): void =>\n  parentSpan?.finish()\n\nexport const saveDbState = (): Promise<void> => saveState()\n\nexport const logError: ActionFunction<IBuildContext, AnyEventObject> = (\n  _context,\n  event\n) => {\n  reporter.error(event.data)\n}\n\nexport const panic: ActionFunction<IBuildContext, AnyEventObject> = (\n  _context,\n  event\n) => {\n  reporter.panic(event.data)\n}\n\nexport const panicBecauseOfInfiniteLoop: ActionFunction<\n  IBuildContext,\n  AnyEventObject\n> = () => {\n  reporter.panic(\n    reporter.stripIndent(`\n  Panicking because nodes appear to be being changed every time we run queries. This would cause the site to recompile infinitely. \n  Check custom resolvers to see if they are unconditionally creating or mutating nodes on every query. \n  This may happen if they create nodes with a field that is different every time, such as a timestamp or unique id.`)\n  )\n}\n\nexport const trackRequestedQueryRun = assign<IBuildContext, AnyEventObject>({\n  pendingQueryRuns: (context, { payload }) => {\n    const pendingQueryRuns = context.pendingQueryRuns || new Set<string>()\n    if (payload?.pagePath) {\n      pendingQueryRuns.add(payload.pagePath)\n    }\n    return pendingQueryRuns\n  },\n})\n\nexport const clearPendingQueryRuns = assign<IBuildContext>(() => {\n  return {\n    pendingQueryRuns: new Set<string>(),\n  }\n})\n\nexport const buildActions: ActionFunctionMap<IBuildContext, AnyEventObject> = {\n  callApi,\n  markNodesDirty,\n  addNodeMutation,\n  spawnMutationListener,\n  assignStoreAndWorkerPool,\n  assignServiceResult,\n  assignServers,\n  markQueryFilesDirty,\n  assignWebhookBody,\n  clearWebhookBody,\n  finishParentSpan,\n  spawnWebpackListener,\n  markSourceFilesDirty,\n  markSourceFilesClean,\n  markNodesClean,\n  incrementRecompileCount,\n  resetRecompileCount,\n  panicBecauseOfInfiniteLoop,\n  saveDbState,\n  setQueryRunningFinished,\n  panic,\n  logError,\n  trackRequestedQueryRun,\n  clearPendingQueryRuns,\n}\n"],"file":"actions.js"}